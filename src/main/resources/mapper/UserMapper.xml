<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kaishengit.mapper.UserMapper">
    <resultMap id="BaseResultMap" type="com.kaishengit.entity.User">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="user_name" jdbcType="VARCHAR" property="userName"/>
        <result column="address" jdbcType="VARCHAR" property="address"/>
        <result column="password" jdbcType="VARCHAR" property="password"/>
        <result column="country_id" jdbcType="INTEGER" property="countryId"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    id, user_name, address, password, country_id
  </sql>
    <select id="selectByExample" parameterType="com.kaishengit.entity.UserExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from t_user
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from t_user
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from t_user
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <delete id="deleteByExample" parameterType="com.kaishengit.entity.UserExample">
        delete from t_user
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.kaishengit.entity.User">
    insert into t_user (id, user_name, address, 
      password, country_id)
    values (#{id,jdbcType=INTEGER}, #{userName,jdbcType=VARCHAR}, #{address,jdbcType=VARCHAR}, 
      #{password,jdbcType=VARCHAR}, #{countryId,jdbcType=INTEGER})
  </insert>
    <insert id="insertSelective" parameterType="com.kaishengit.entity.User">
        insert into t_user
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="userName != null">
                user_name,
            </if>
            <if test="address != null">
                address,
            </if>
            <if test="password != null">
                password,
            </if>
            <if test="countryId != null">
                country_id,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="userName != null">
                #{userName,jdbcType=VARCHAR},
            </if>
            <if test="address != null">
                #{address,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                #{password,jdbcType=VARCHAR},
            </if>
            <if test="countryId != null">
                #{countryId,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.kaishengit.entity.UserExample" resultType="java.lang.Long">
        select count(*) from t_user
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update t_user
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.userName != null">
                user_name = #{record.userName,jdbcType=VARCHAR},
            </if>
            <if test="record.address != null">
                address = #{record.address,jdbcType=VARCHAR},
            </if>
            <if test="record.password != null">
                password = #{record.password,jdbcType=VARCHAR},
            </if>
            <if test="record.countryId != null">
                country_id = #{record.countryId,jdbcType=INTEGER},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update t_user
        set id = #{record.id,jdbcType=INTEGER},
        user_name = #{record.userName,jdbcType=VARCHAR},
        address = #{record.address,jdbcType=VARCHAR},
        password = #{record.password,jdbcType=VARCHAR},
        country_id = #{record.countryId,jdbcType=INTEGER}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.kaishengit.entity.User">
        update t_user
        <set>
            <if test="userName != null">
                user_name = #{userName,jdbcType=VARCHAR},
            </if>
            <if test="address != null">
                address = #{address,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                password = #{password,jdbcType=VARCHAR},
            </if>
            <if test="countryId != null">
                country_id = #{countryId,jdbcType=INTEGER},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.kaishengit.entity.User">
    update t_user
    set user_name = #{userName,jdbcType=VARCHAR},
      address = #{address,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      country_id = #{countryId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
    <!--分页查询-->
    <select id="page" resultType="user">
        SELECT * FROM t_user
    </select>
    <!--多表查询-->
    <resultMap id="baseMap" type="com.kaishengit.entity.User">
        <id column="id" property="id"/>
        <id column="user_name" property="userName"/>
        <id column="address" property="address"/>
        <id column="password" property="password"/>
        <id column="country_id" property="countryId"/>
    </resultMap>
    <resultMap id="userMap" type="com.kaishengit.entity.User" extends="baseMap">
        <!--在实体类user中封装一个country属性，association property对应user中的country属性-->
        <association property="country" javaType="com.kaishengit.entity.Country">
            <id column="id" property="id"/>
            <id column="country_name" property="countryName"/>
        </association>
    </resultMap>
    <!--user和country表联查-->
    <select id="findCountryByUserId" resultMap="userMap">
        SELECT tu.id,user_name,address,password,country_id,tc.id,tc.country_name
        FROM t_user AS tu LEFT JOIN t_country AS tc ON tu.country_id = tc.id
        WHERE tu.id = #{id}
    </select>

    <resultMap id="userWithTagMap" type="com.kaishengit.entity.User" extends="baseMap">
        <!--实体类user中封装tagList属性-->
        <collection property="tagList" ofType="com.kaishengit.entity.Tag">
            <id column="id" property="id"/>
            <id column="tag_name" property="tagName"/>
        </collection>
    </resultMap>
    <!--查找某个用户对应的多个tag标签-->
    <select id="findUserTagById" parameterType="int" resultMap="userWithTagMap">
        SELECT tu.id,user_name,tt.tag_name FROM t_user AS tu
        INNER JOIN user_tag ON tu.id = user_tag.user_id
        INNER JOIN t_tag AS tt ON tt.id = user_tag.tag_id
        WHERE tu.id = #{id}
    </select>
    <!--批量插入，一次插入多条user对象-->
    <insert id="batchInsert" parameterType="user">
        INSERT INTO t_user (user_name, address, password,country_id)
        VALUES
        <!--将多个user对象封装成userList集合中,注意下面sql语句要加括号-->
        <foreach collection="userList" item="user" separator=",">
            (#{user.userName},#{user.address},#{user.password},#{user.countryId})
        </foreach>
    </insert>


</mapper>